// CONFIG

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// CUSTOMER
model Customer {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  name String
  email String
  phone String
  address String
  pfp String?

  storeCredit Float @default(0)
  orders Order[]
}

// EMPLOYEE
model Employee {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  name String
  email String @unique
  pfp String?
  
  admin Boolean @default(false)

  session Session?

  orders Order[]
}
 
model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  createdAt DateTime @default(now())
  token String @unique

  employee Employee? @relation(fields: [employeeId], references: [id])
  employeeId String? @db.ObjectId @unique
}

// PRODUCT

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  name String @unique
  description String @default("")

  basePrice Float // per unit
  cgstTaxRate Float @default(0)
  sgstTaxRate Float @default(0)

  stock Int?
  stockEvents StockEvent[]

  orderItems OrderItem[]
}

model StockEvent {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  
  delta Int
  price Float // net price snapshot

  product Product @relation(fields: [productId], references: [id])
  productId String @db.ObjectId
}

// ORDER

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  items OrderItem[]
  notes String @default("")

  invoice Invoice? // effectively required
  
  customer Customer @relation(fields: [customerId], references: [id])
  customerId String @db.ObjectId

  employee Employee @relation(fields: [employeeId], references: [id])
  employeeId String @db.ObjectId
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  price Float
  quantity Int

  product Product? @relation(fields: [productId], references: [id])
  productId String? @db.ObjectId

  order Order @relation(fields: [orderId], references: [id])
  orderId String @db.ObjectId
}

// // PROMOTIONS

// model Promotions {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   startDate DateTime
//   endDate DateTime
//   discountRate Float
// }

// PAYMENT

model Invoice {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  amount Float
  amountPaid Float @default(0)
  payments Payment[]

  order Order @relation(fields: [orderId], references: [id])
  orderId String @db.ObjectId @unique
}

model Payment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  amount Float
  method PaymentMethod

  invoice Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String @db.ObjectId @unique
}

enum PaymentMethod {
  CASH
  CHECK
  CARD
  GPAY
  STORECREDIT
}